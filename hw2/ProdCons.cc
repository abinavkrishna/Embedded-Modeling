//////////////////////////////////////////////////////////////////////
// C++ source file generated by SpecC V2.2.1
// Design: ProdCons
// File:   ProdCons.cc
// Time:   Sun Jan 26 16:11:16 2020
//////////////////////////////////////////////////////////////////////

// Note: User-defined include files are inlined in this file.

// Note: System-defined include files are inlined in this file.

#include "ProdCons.h"


unsigned int _IDcnt = 0;
// channel class definitions /////////////////////////////////////////

C1::C1()
    : _specc::channel()
{   
}

C1::~C1(void)
{   
}

#line 23 "ProdCons.sc"
char C1::Receive(void) {
    char ch;
    _specc::wait(event(&Req), ((void*)0));
    ch = Data;
    _specc::notify(event(&Ack), ((void*)0));
    return ch;
}

#line 17 "ProdCons.sc"
void C1::Send(char ch) {
    Data = ch;
    _specc::notify(event(&Req), ((void*)0));
    _specc::wait(event(&Ack), ((void*)0));
}

// behavior class definitions ////////////////////////////////////////

#line 46 "ProdCons.cc"
Producer::Producer(unsigned int _idcnt, Sender (&Port))
    : _specc::behavior(_idcnt), Port(Port),
    ch("Apples and Oranges")
{   
}

Producer::~Producer(void)
{   
}

#line 34 "ProdCons.sc"
void Producer::main(void) {
    int i = 0;
    printf("Producer starts.\n");
    do  {
	printf("Producer sends '%c'. \n", ch[i]);
	Port.Send(ch[i]);
	i++ ;
    }
    while(

#line 41 "ProdCons.sc"
	ch[i] != '\000');
    printf("Producer done. \n");
}

#line 73 "ProdCons.cc"
Consumer::Consumer(unsigned int _idcnt, Receiver (&Port))
    : _specc::behavior(_idcnt), Port(Port)
{   
}

Consumer::~Consumer(void)
{   
}

#line 48 "ProdCons.sc"
void Consumer::main(void) {
    printf("Consumer starts.\n");
    while(true) {
	ch = Port.Receive();
	if (ch == 0) break;
	printf("Consumer received '%c'. \n", ch);
    }
    printf("Consumer done. \n");
}

#line 94 "ProdCons.cc"
Main::Main(unsigned int _idcnt)
    : _specc::class_type(_idcnt),
    c(),
    cons(_IDcnt, c),
    prod(_IDcnt, c)
{   
}

Main::~Main(void)
{   
}

#line 63 "ProdCons.sc"
int Main::main() {
    printf("Main starts.\n");
    { _specc::fork _scc_fork_0(&prod), _scc_fork_1(&cons); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, ((_specc::fork*)0));
    }
    printf("Main done.\n");
    return 0;
}

#line 118 "ProdCons.cc"
Main _scc_main(_IDcnt);

int main()
{   
    int _scc_main_return;
    
    _specc::start();
    _scc_main_return = _scc_main.main();
    _specc::end();
    return(_scc_main_return);
}

void _scc_bit4_err_handle(
    const _bit4& bit4vec)
{   
    char temp_bits[1024], *p;
    p=bit2str(2,&temp_bits[1023], bit4vec);
    _specc::abort(
	"ERROR:\t Casting a bit4 vector failed \n"
	"Bit4 vector contains X/Z values %s\n"
	"Simulation aborted.\n", p);
	
}

//////////////////////////////////////////////////////////////////////
// End of file ProdCons.cc
//////////////////////////////////////////////////////////////////////
